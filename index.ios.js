"use strict";

var React = require('react-native');
var Button = require('react-native-button'); // Install the button from npm with npm install react-native-button --save
var {
  StyleSheet,
  AppRegistry,
  View,
  Text,
  Alert, // For notifying user
  Image, // Required for adding the Reset button
  TouchableHighlight // Required for making the Image pressable
} = React;

var NoughtsCrosses = React.createClass({

  /***
    The UI consists of 9 buttons which are placed on a 3*3 grid and also has a Reset button.
    The buttons on the grid are assumed to be logically numbered from 0 to 8, 0 being the ID
    of the button on the top left corner (or button0) and 8 being the ID of the button on the
    bottom right corner (or button8).
    The buttons are given their IDs in a top-down, left-right fashion.
  ***/

  getInitialState: function() {
    return {
      // true = Player 1's turn
      // false = Player 2's turn
      flag: true,

      // Text to be shown on the button0
      character0: null,
      // Flag determining whether button0 is enabled or disabled
      disabled0: false,

      // Text to be shown on the button1
      character1: null,
      // Flag determining whether button1 is enabled or disabled
      disabled1: false,

      // Text to be shown on the button2
      character2: null,
      // Flag determining whether button2 is enabled or disabled
      disabled2: false,

      // Text to be shown on the button3
      character3: null,
      // Flag determining whether button3 is enabled or disabled
      disabled3: false,

      // Text to be shown on the button4
      character4: null,
      // Flag determining whether button4 is enabled or disabled
      disabled4: false,

      // Text to be shown on the button5
      character5: null,
      // Flag determining whether button5 is enabled or disabled
      disabled5: false,

      // Text to be shown on the button6
      character6: null,
      // Flag determining whether button6 is enabled or disabled
      disabled6: false,

      // Text to be shown on the button7
      character7: null,
      // Flag determining whether button7 is enabled or disabled
      disabled7: false,

      // Text to be shown on the button8
      character8: null,
      // Flag determining whether button8 is enabled or disabled
      disabled8: false,

      /***
        counter variable for determining a draw condition.
        If none of the wining conditions are met, declare the game as draw.
        Therefore, when counter > 8, declate the game as draw.
      ***/
      counter: 0
    }
  },
  render: function() {

    /***
      Due to the use of for loop for generating buttons, a warning was been generated.
      Thus, the grid buttons are been hard coded and not generated by any loop.
    ***/

    return (
      <View style = { styles.container } >
        <View style = { styles.header } >

        </View>

        { /* buttonPressed method is passed a parameter which is the ID of the button which helps in disabling it once pressed */ }
        <View style = { styles.grid } >
          <View style = {{ justifyContent: 'space-around', padding: 20 }}>
          <Button  disabled = { this.state.disabled0 } onPress = { () => this.buttonPressed(0) }>
              <Text style = {[ styles.button ]}>
                { /* Display the button text as per the state */ }
                { this.state.character0 }
              </Text>
          </Button>
          <Button  disabled = { this.state.disabled1 } onPress = { () => this.buttonPressed(1) }>
              <Text style = {[ styles.button ]}>
                { /* Display the button text as per the state */ }
                { this.state.character1 }
              </Text>
          </Button>
          <Button  disabled = { this.state.disabled2 } onPress = { () => this.buttonPressed(2) }>
              <Text style = {[ styles.button ]}>
                { /* Display the button text as per the state */ }
                { this.state.character2 }
              </Text>
          </Button>
          </View>

          <View style = {{ justifyContent: 'space-around', padding: 20 }}>
          <Button  disabled = { this.state.disabled3 } onPress = { () => this.buttonPressed(3) }>
              <Text style = {[ styles.button ]}>
                { /* Display the button text as per the state */ }
                { this.state.character3 }
              </Text>
          </Button>
          <Button  disabled = { this.state.disabled4 } onPress = { () => this.buttonPressed(4) }>
              <Text style = {[ styles.button ]}>
                { /* Display the button text as per the state */ }
                { this.state.character4 }
              </Text>
          </Button>
          <Button  disabled = { this.state.disabled5 } onPress = { () => this.buttonPressed(5) }>
              <Text style = {[ styles.button ]}>
                { /* Display the button text as per the state */ }
                { this.state.character5 }
              </Text>
          </Button>
          </View>

          <View style = {{ justifyContent: 'space-around', padding: 20 }}>
          <Button  disabled = { this.state.disabled6 } onPress = { () => this.buttonPressed(6) }>
              <Text style = {[ styles.button ]}>
                { /* Display the button text as per the state */ }
                { this.state.character6 }
              </Text>
          </Button>
          <Button  disabled = { this.state.disabled7 } onPress = { () => this.buttonPressed(7) }>
              <Text style = {[ styles.button ]}>
                { /* Display the button text as per the state */ }
                { this.state.character7 }
              </Text>
          </Button>
          <Button  disabled = { this.state.disabled8 } onPress = { () => this.buttonPressed(8) }>
              <Text style = {[ styles.button ]}>
                { /* Display the button text as per the state */ }
                { this.state.character8 }
              </Text>
          </Button>
          </View>
        </View>

        <View style = { styles.footer } >
          { /* Reset button */}
          <TouchableHighlight  onPress = { this.resetGame } underlayColor = 'white'>
            <Image source = { require('./assets/images/reset.png') } />
          </TouchableHighlight>
        </View>

      </View>
    );
  },
  buttonPressed: function(buttonId) {
    console.log("Button ID: " + buttonId);

    // Assign the counter state in order to increment the counter state
    var countChances = this.state.counter;

    // Determine whether it is Player 1's turn or Player 2's turn.
    var chance = this.state.flag;

    // Character to be displayed on the button
    var character
    console.log("FLAG: " + chance);

    if (chance) {
      // Player 1's turn

      character = "X";
      this.setState({
        // Change the flag for Player 2's turn
        flag: false
      });
    } else {
      // Player 2's turn

      character = "O";
      this.setState({
        // Change the flag for Player 2's turn
        flag: true
      });
    }

    console.log("CHARACTER: " + character);

    /***
      Determine the button pressed with the help of buttonId and disable it.
      Also, set the button text in state to character value.
    ***/
    switch (buttonId) {
      case 0:
        this.setState({
          disabled0: true,
          character0: character
        });
        break;
      case 1:
        this.setState({
          disabled1: true,
          character1: character
        });
        break;
      case 2:
        this.setState({
          disabled2: true,
          character2: character
          });
        break;
      case 3:
        this.setState({
          disabled3: true,
          character3: character
        });
        break;
      case 4:
        this.setState({
          disabled4: true,
          character4: character
        });
        break;
      case 5:
        this.setState({
          disabled5: true,
          character5: character
        });
        break;
      case 6:
        this.setState({
          disabled6: true,
          character6: character
        });
        break;
      case 7:
        this.setState({
          disabled7: true,
          character7: character
        });
        break;
      case 8:
        this.setState({
          disabled8: true,
          character8: character
        });
        break;
      default:
        console.log("No Action!");
    }

    // Increment the counter variable as on press has occured
    countChances += 1;
    console.log("COUNTER: " + countChances);
    this.setState({
      counter: countChances
    });

    this.winingConditions();
  },
  winingConditions: function() {

    /***
      In order to make the the if-else statements more readable, the various
      state values are assigned to the variables.
    ***/
    var text0 = this.state.character0;
    var text1 = this.state.character1;
    var text2 = this.state.character2;
    var text3 = this.state.character3;
    var text4 = this.state.character4;
    var text5 = this.state.character5;
    var text6 = this.state.character6;
    var text7 = this.state.character7;
    var text8 = this.state.character8;

    var countChances = this.state.counter;

    if ((text0 != null && text1 != null && text2 != null) &&
    (text0 == text1) &&
    (text1 == text2)) {

      /***
        Case when the text of the buttons in the first row are all the same i.e. are all 'X' or are all 'O'
      ***/

      Alert.alert(
        'Game Over!',
        text0 + "s Win!",
        [{
          text: 'OK', onPress: this.resetGame
        }]
      );

    } else if ((text3 != null && text4 != null && text5 != null) &&
    (text3 == text4) &&
    (text4 == text5)) {

      /***
        Case when the text of the buttons in the middle row are all the same i.e. are all 'X' or are all 'O'
      ***/

      Alert.alert(
        'Game Over!',
        text3 + "s Win!",
        [{
          text: 'OK', onPress: this.resetGame
        }]
      );

    } else if ((text6 != null && text7 != null && text8 != null) &&
    (text6 == text7) &&
    (text7 == text8)) {

      /***
        Case when the text of the buttons in the last row are all the same i.e. are all 'X' or are all 'O'
      ***/

      console.log("3 " + text6 + " " + text7 + " " + text8);

      Alert.alert(
        'Game Over!',
        text6 + "s Win!",
        [{
          text: 'OK', onPress: this.resetGame
        }]
      );

    } else if ((text0 != null && text3 != null && text6 != null) &&
    (text0 == text3) &&
    (text3 == text6)) {

      /***
        Case when the text of the buttons in the first column are all the same i.e. are all 'X' or are all 'O'
      ***/

      Alert.alert(
        'Game Over!',
        text0 + "s Win!",
        [{
          text: 'OK', onPress: this.resetGame
        }]
      );

    } else if ((text1 != null && text4 != null && text7 != null) &&
    (text1 == text4) &&
    (text4 == text7)) {

      /***
        Case when the text of the buttons in the middle column are all the same i.e. are all 'X' or are all 'O'
      ***/

      Alert.alert(
        'Game Over!',
        text1 + "s Win!",
        [{
          text: 'OK', onPress: this.resetGame
        }]
      );

    } else if ((text2 != null && text5 != null && text8 != null) &&
    (text2 == text5) &&
    (text5 == text8)) {

      /***
        Case when the text of the buttons in the last column are all the same i.e. are all 'X' or are all 'O'
      ***/

      Alert.alert(
        'Game Over!',
        text2 + "s Win!",
        [{
          text: 'OK', onPress: this.resetGame
        }]
      );

    } else if ((text0 != null && text4 != null && text8 != null) &&
    (text0 == text4) &&
    (text4 == text8)) {

      /***
        Case when the text of the buttons in the diagonal row (left to right) are all the same i.e. are all 'X' or are all 'O'
      ***/

      Alert.alert(
        'Game Over!',
        text0 + "s Win!",
        [{
          text: 'OK', onPress: this.resetGame
        }]
      );

    } else if ((text6 != null && text4 != null && text2 != null) &&
    (text6 == text4) &&
    (text4 == text2)) {

      /***
        Case when the text of the buttons in the diagonal row (right to left) are all the same i.e. are all 'X' or are all 'O'
      ***/

      Alert.alert(
        'Game Over!',
        text6 + "s Win!",
        [{
          text: 'OK', onPress: this.resetGame
        }]
      );

    } else {

      // Case: Game draw
      if (countChances == 9) {

        Alert.alert(
          'Game Over!',
          "It's a draw!",
          [{
            text: 'Reset', onPress: this.resetGame
          }]
        );
      }
    }


  },
  resetGame: function() {

    // Reset all teh values in the state in order to reset the game.
    this.setState({
      flag: true,
      character0: null,
      disabled0: false,
      character1: null,
      disabled1: false,
      character2: null,
      disabled2: false,
      character3: null,
      disabled3: false,
      character4: null,
      disabled4: false,
      character5: null,
      disabled5: false,
      character6: null,
      disabled6: false,
      character7: null,
      disabled7: false,
      character8: null,
      disabled8: false,
      counter: 0
    });
  }

});

var styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  header: {
    flex: 2 // Flex header 2/8th of the entire screen size
  },
  grid: {
    flex: 3, // Flex grid 3/8th of the entire screen size
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  image: {
    width: 250,
    height: 250
  },
  footer: {
    flex: 2 // Flex footer 2/8th of the entire screen size
  },
  button: {
    borderWidth: 2,
    borderRadius: 25,
    borderColor: '#00CC00',
    width: 50,
    height: 50,
    justifyContent: 'center',
    alignItems: 'center',
    paddingLeft: 18,
    paddingTop: 10,
    fontSize: 25
  }
});

AppRegistry.registerComponent('NoughtsCrosses', () => NoughtsCrosses);
